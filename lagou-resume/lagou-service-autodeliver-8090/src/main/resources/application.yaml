

spring:
  application:
    name: lagou-service-autodeliver
  zipkin:
    base-url: http://101.133.163.204:9411 # zipkin server的请求地址
    sender:
      # web 客户端将踪迹⽇志数据通过⽹络请求的⽅式传送到服务端，另外还有配置
      # kafka/rabbit 客户端将踪迹⽇志数据传递到mq进⾏中转
      type: web
    sleuth:
      sampler:
        # 采样率 1 代表100%全部采集 ，默认0.1 代表10% 的请求踪迹数据会被采集
        # ⽣产环境下，请求量⾮常⼤，没有必要所有请求的踪迹数据都采集分析，对于⽹络包括server端压⼒都是⽐较⼤的，可以配置采样率采集⼀定⽐例的请求的踪迹数据进⾏分析即可
        probability: 1
#注册到Eureka服务中心
eureka:
  client:
    service-url:
      #注册到集群, 逗号拼接
      defaultZone: http://EurekaServerA:8761/eureka,http://EurekaServerB:8762/eureka
  instance:
    prefer-ip-address: true #服务实例中显示ip,而不是主机名
    instance-id: ${spring.cloud.client.ip-address}:${spring.application.name}:${server.port}:@project.version@ #实例名称,支持自定义

#针对的被调⽤⽅微服务名称,不加就是全局⽣效 (服务名需要大写, 小写不生效)
#LAGOU-SERVICE-RESUME:
#  ribbon:
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule #负载策略调整

# springboot中暴露健康检查等断点接⼝
management:
  endpoints:
    web:
      exposure:
        include: "*"
  # 是否暴露健康接⼝的细节
  endpoint:
    health:
      show-details: always
server:
  port: 8090

#针对的被调⽤⽅微服务名称,不加就是全局⽣效
lagou-service-resume:
  ribbon:
    #请求连接超时时间
    ConnectTimeout: 2000
    #请求处理超时时间 Feign的超时时长设置
    ReadTimeout: 2000
    #对所有操作都进⾏重试
    OkToRetryOnAllOperations: true
    ####根据如上配置，当访问到故障请求的时候，它会再尝试访问⼀次当前实例（次数由MaxAutoRetries配置），
    ####如果不⾏，就换⼀个实例进⾏访问，如果还不⾏，再换⼀次实例访问（更换次数由MaxAutoRetriesNextServer配置），
    ####如果依然不⾏，返回失败信息。
    MaxAutoRetries: 0 #对当前选中实例重试次数，不包括第⼀次调⽤
    MaxAutoRetriesNextServer: 0 #切换实例的重试次数
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #负载策略调整

logging:
  level:
    # Feign⽇志只会对⽇志级别为debug的做出响应
    com.lz.service.ResumeServiceFeignClient: debug
    org.springframework.web.servlet.DispatcherServlet: debug
    org.springframework.cloud.sleuth: debug

# 开启Feign的熔断功能
feign:
  hystrix:
    enabled: true
  compression:
    request:
      enabled: true # 开启请求压缩
      mime-types: text/html,application/xml,application/json # 设置压缩的数据类型，此处也是默认值
      min-request-size: 2048 # 设置触发压缩的⼤⼩下限，此处也是默认值
    response:
      enabled: true # 开启响应压缩

hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            #Hystrix的超时时⻓设置,和上面ribbon的超时时间比较取最小值,超时后返回兜底数据
            # 个人理解是不影响上面的重试,两种超时场景,先达到哪种,都会触发兜底
            timeoutInMilliseconds: 8000 #超时时间的配置,hystrix的时间应该大于ribbon正常完成获取连接+调用+重试的总时间